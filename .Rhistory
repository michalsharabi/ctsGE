installed.packages("/home/michal/MyPack/ctsGE_0.0.0.9000.tar.gz",repos="NULL",type="source")
install.packages("/home/michal/MyPack/ctsGE_0.0.0.9000.tar.gz",repos="NULL",type="source")
install.packages("/home/michal/MyPack/ctsGE_0.0.0.9000.tar.gz",type="source")
devtools::inst(ctsGE)
devtools::inst("ctsGE")
devtools::install("ctsGE")
devtools::install(ctsGE)
devtools::load_all(".")
library(ctsGE)
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
devtools::install_github("michmich76/ctsGE")
library(ctsGE)
detach("package:ctsGE", unload=TRUE)
library("ctsGE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
detach("package:ctsGE", unload=TRUE)
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
devtools::install_github("michmich76/ctsGE")
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
getwd()
devtools::use_vignette()
devtools::use_vignette("ctsGE")
library("ctsGE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
detach("package:ctsGE", unload=TRUE)
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
library(ctsGE)
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
library("ctsGE", lib.loc="/usr/local/lib/R/site-library")
vignette("ctsGE")
devtools::install_github("michmich76/ctsGE")
devtools::install_github("michmich76/ctsGE")
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("ctsGE", lib="/usr/local/lib/R/site-library")
library("ctsGE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
system.file("extdata", "GSM37929.xls", package = "ctsGE")
data_dir=system.file("extdata", "GSM37929.xls", package = "ctsGE")
dir(pattern="*\\.txt$")
readTSGE(data_dir)
rts1=readTSGE(data_dir)
rts1$timePoints
rts1$tsTable
head(rts1$tsTable)
data_dir=system.file("extdata", "*.xls", package = "ctsGE")
data_dir
data_dir=system.file("extdata", ".xls", package = "ctsGE")
data_dir
data_dir=system.file("extdata", "GSM37929.xls", package = "ctsGE")
data_dir
dir(data_dir)
dir( "/home/michal/R/x86_64-pc-linux-gnu-library/3.2/ctsGE/extdata/*.xls$")
dir(pattern =  "/home/michal/R/x86_64-pc-linux-gnu-library/3.2/ctsGE/extdata/*.xls$")
dir(pattern =  "/home/michal/R/x86_64-pc-linux-gnu-library/3.2/ctsGE/extdata/*\.xls$")
dir(pattern =  "/home/michal/R/x86_64-pc-linux-gnu-library/3.2/ctsGE/extdata/*\\.xls$")
dir(pattern =  "/home/michal/R/x86_64-pc-linux-gnu-library/3\\.2/ctsGE/extdata/*\\.xls$")
data_dir=system.file("extdata", package = "ctsGE")
data_dir
read.delim("/home/michal/R/x86_64-pc-linux-gnu-library/3.2/ctsGE/extdata/GSM37929.xls")
x=read.delim("/home/michal/R/x86_64-pc-linux-gnu-library/3.2/ctsGE/extdata/GSM37929.xls")
head(x)
readTSGE(path = data_dir)
system.file(package = "ctsGE")
data_dir
paste0(data_dir,"/*\\.xls$")
pt=paste0(data_dir,"/*\\.xls$")
dir(pattern = pt)
dir(pattern =data_dir)
dir(path=data_dir,pattern = "\\.xls$")
f=dir(path=data_dir,pattern = "\\.xls$")
rts1=readTSGE(f,path = data_dir)
rts1$samples
rts1$timePoints
head(rts1$tsTable)
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
library(ctsGE)
vignette("ctsGE")
data_dir <- system.file("extdata", package = "ctsGE")
files <- dir(path=data_dir,pattern = "\\.xls$")
files
data_dir
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
library("ctsGE", lib.loc="/usr/local/lib/R/site-library")
library("ctsGE", lib.loc="/usr/local/lib/R/site-library")
files
data_dir
data_dir <- system.file("extdata", package = "ctsGE")
files <- dir(path=data_dir,pattern = "\\.xls$")
data_dir
devtools::install_github("michmich76/ctsGE")
data_dir <- system.file("extdata", package = "ctsGE")
files <- dir(path=data_dir,pattern = "\\.xls$")
vignette("ctsGE")
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
library("ctsGE", lib.loc="/usr/local/lib/R/site-library")
library("ctsGE", lib.loc="/usr/local/lib/R/site-library")
vignette("ctsGE")
data_dir <- system.file("extdata", package = "ctsGE")
files <- dir(path=data_dir,pattern = "\\.xls$")
data_dir
files
library("ballgown", lib.loc="/usr/local/lib/R/site-library")
data_directory = system.file('extdata', package='ballgown')
data_directory
bg = ballgown(dataDir=data_directory, samplePattern='sample', meas='all')
bg
structure(bg)
data_directory
library("ballgown", lib.loc="/usr/local/lib/R/site-library")
getwd()
ClustProfiles = function(x,scaling=TRUE){
clust_tbl <-  list()
kprof <-  list()
if(scaling){ tmp <- cbind(as.data.frame(x$scaled),profiles=x$profiles[rownames(x$scaled),ncol(x$profiles)])
}
else { tmp <- cbind(as.data.frame(x$tsTable),profiles=x$profiles[rownames(x$scaled),ncol(x$profiles)])}
for(idx in tmp$profiles){
tbl <-  tmp[tmp$profiles==idx,1:x$timePoints]
if(nrow(tbl) > 9){
ratio_ss <-  rep(0,9)
fit_km <-  list()
for (k in 1:9) {
# Apply k-means to school_result: school_km
fit_km[[k]] <- kmeans(tbl,k)
# Save the ratio between of WSS to TSS in kth element of ratio_ss
ratio_ss[k] <-  fit_km[[k]]$tot.withinss/fit_km[[k]]$totss
}
G <-  which(ratio_ss<0.2)[1]#when: WSS / TSS < 0.2 this is the optipal k
clust <-  fit_km[[G]]$cluster
}
else{G<- 1;clust<- rep(1,nrow(tbl))}
kprof[[idx]] <-  c(nrow(tbl),G)
clust_tbl[[idx]] <- data.frame(clusters=clust,profiles=idx)
rownames(clust_tbl[[idx]]) <- rownames(tbl)
}
names(clust_tbl) <-  NULL
x$optimalK <-  do.call("rbind",kprof); colnames(x$optimalK) <-  c("tags","k")
x$ClusteredProfilesTable <- do.call("rbind",clust_tbl)
structure(x,class = "ctsGEList")
}
data_dir <- system.file("extdata", package = "ctsGE")
files <- dir(path=data_dir,pattern = "\\.xls$")
rts <- readTSGE(files, path = data_dir, labels = c("0h","6h","12h","24h","48h","72h") )
library("ctsGE", lib.loc="/usr/local/lib/R/site-library")
library("ctsGE", lib.loc="/usr/local/lib/R/site-library")
rts <- readTSGE(files, path = data_dir, labels = c("0h","6h","12h","24h","48h","72h") )
prts <- PreparingTheProfiles(x = rts, cutoff = 0.8, mad.scale = TRUE)
ClustProfiles <- ClustProfiles(prts, scaling = TRUE)
x=prts
tmp <- cbind(as.data.frame(x$scaled),profiles=x$profiles[rownames(x$scaled),ncol(x$profiles)])
head(tmp)
idx=tmp$profiles[1]
idx
tbl <-  tmp[tmp$profiles==idx,1:x$timePoints]
tbl
head(tbl)
if(nrow(tbl) > 9){
ratio_ss <-  rep(0,9)
fit_km <-  list()
for (k in 1:9) {
# Apply k-means to school_result: school_km
fit_km[[k]] <- kmeans(tbl,k)
# Save the ratio between of WSS to TSS in kth element of ratio_ss
ratio_ss[k] <-  fit_km[[k]]$tot.withinss/fit_km[[k]]$totss
}
G <-  which(ratio_ss<0.2)[1]#when: WSS / TSS < 0.2 this is the optipal k
clust <-  fit_km[[G]]$cluster
}
else{G<- 1;clust<- rep(1,nrow(tbl))}
if(nrow(tbl) > 9){
ratio_ss <-  rep(0,9)
fit_km <-  list()
for (k in 1:9) {
# Apply k-means to school_result: school_km
fit_km[[k]] <- kmeans(tbl,k)
# Save the ratio between of WSS to TSS in kth element of ratio_ss
ratio_ss[k] <-  fit_km[[k]]$tot.withinss/fit_km[[k]]$totss
}
G <-  which(ratio_ss<0.2)[1]#when: WSS / TSS < 0.2 this is the optipal k
clust <-  fit_km[[G]]$cluster
}else{G<- 1;clust<- rep(1,nrow(tbl))}
clust_tbl <-  list()
kprof <-  list()
kprof[[idx]] <-  c(nrow(tbl),G)
clust_tbl[[idx]] <- data.frame(clusters=clust,profiles=idx)
rownames(clust_tbl[[idx]]) <- rownames(tbl)
ClustProfiles = function(x,scaling=TRUE){
clust_tbl <-  list()
kprof <-  list()
if(scaling){ tmp <- cbind(as.data.frame(x$scaled),profiles=x$profiles[rownames(x$scaled),ncol(x$profiles)])
}
else { tmp <- cbind(as.data.frame(x$tsTable),profiles=x$profiles[rownames(x$scaled),ncol(x$profiles)])}
for(idx in tmp$profiles){
tbl <-  tmp[tmp$profiles==idx,1:x$timePoints]
if(nrow(tbl) > 9){
ratio_ss <-  rep(0,9)
fit_km <-  list()
for (k in 1:9) {
# Apply k-means to school_result: school_km
fit_km[[k]] <- kmeans(tbl,k)
# Save the ratio between of WSS to TSS in kth element of ratio_ss
ratio_ss[k] <-  fit_km[[k]]$tot.withinss/fit_km[[k]]$totss
}
G <-  which(ratio_ss<0.2)[1]#when: WSS / TSS < 0.2 this is the optipal k
clust <-  fit_km[[G]]$cluster
}else{G<- 1;clust<- rep(1,nrow(tbl))}
kprof[[idx]] <-  c(nrow(tbl),G)
clust_tbl[[idx]] <- data.frame(clusters=clust,profiles=idx)
rownames(clust_tbl[[idx]]) <- rownames(tbl)
}
names(clust_tbl) <-  NULL
x$optimalK <-  do.call("rbind",kprof); colnames(x$optimalK) <-  c("tags","k")
x$ClusteredProfilesTable <- do.call("rbind",clust_tbl)
structure(x,class = "ctsGEList")
}
ClustProfiles <- ClustProfiles(prts, scaling = TRUE)
kprof[[idx]]
clust_tbl[[idx]]
names(clust_tbl)
x$optimalK <-  do.call("rbind",kprof); colnames(x$optimalK) <-  c("tags","k")
x$ClusteredProfilesTable <- do.call("rbind",clust_tbl)
x$optimalK
x$ClusteredProfilesTable
sort(table(tmp$profiles))
head(sort(table(tmp$profiles)))
sort(table(tmp$profiles),decreasing = T)
ClustProfiles <- ClustProfiles(prts, scaling = TRUE)
clust
data.frame(clusters=clust,profiles=idx)
idx
tmp$profiles
unique(tmp$profiles)
ClustProfiles = function(x,scaling=TRUE){
clust_tbl <-  list()
kprof <-  list()
if(scaling){ tmp <- cbind(as.data.frame(x$scaled),profiles=x$profiles[rownames(x$scaled),ncol(x$profiles)])
}
else { tmp <- cbind(as.data.frame(x$tsTable),profiles=x$profiles[rownames(x$scaled),ncol(x$profiles)])}
for(idx in unique(tmp$profiles)){
tbl <-  tmp[tmp$profiles==idx,1:x$timePoints]
if(nrow(tbl) > 9){
ratio_ss <-  rep(0,9)
fit_km <-  list()
for (k in 1:9) {
# Apply k-means to school_result: school_km
fit_km[[k]] <- kmeans(tbl,k)
# Save the ratio between of WSS to TSS in kth element of ratio_ss
ratio_ss[k] <-  fit_km[[k]]$tot.withinss/fit_km[[k]]$totss
}
G <-  which(ratio_ss<0.2)[1]#when: WSS / TSS < 0.2 this is the optipal k
clust <-  fit_km[[G]]$cluster
}else{G<- 1;clust<- rep(1,nrow(tbl))}
kprof[[idx]] <-  c(nrow(tbl),G)
clust_tbl[[idx]] <- data.frame(clusters=clust,profiles=idx)
rownames(clust_tbl[[idx]]) <- rownames(tbl)
}
names(clust_tbl) <-  NULL
x$optimalK <-  do.call("rbind",kprof); colnames(x$optimalK) <-  c("tags","k")
x$ClusteredProfilesTable <- do.call("rbind",clust_tbl)
structure(x,class = "ctsGEList")
}
ClustProfiles <- ClustProfiles(prts, scaling = TRUE)
ClustProfiles = function(x,scaling=TRUE){
clust_tbl <-  list()
kprof <-  list()
if(scaling){ tmp <- cbind(as.data.frame(x$scaled),profiles=x$profiles[rownames(x$scaled),ncol(x$profiles)])
}
else { tmp <- cbind(as.data.frame(x$tsTable),profiles=x$profiles[rownames(x$scaled),ncol(x$profiles)])}
for(idx in as.character(unique(tmp$profiles))){
tbl <-  tmp[tmp$profiles==idx,1:x$timePoints]
if(nrow(tbl) > 9){
ratio_ss <-  rep(0,9)
fit_km <-  list()
for (k in 1:9) {
# Apply k-means to school_result: school_km
fit_km[[k]] <- kmeans(tbl,k)
# Save the ratio between of WSS to TSS in kth element of ratio_ss
ratio_ss[k] <-  fit_km[[k]]$tot.withinss/fit_km[[k]]$totss
}
G <-  which(ratio_ss<0.2)[1]#when: WSS / TSS < 0.2 this is the optipal k
clust <-  fit_km[[G]]$cluster
}else{G<- 1;clust<- rep(1,nrow(tbl))}
kprof[[idx]] <-  c(nrow(tbl),G)
clust_tbl[[idx]] <- data.frame(clusters=clust,profiles=idx)
rownames(clust_tbl[[idx]]) <- rownames(tbl)
}
names(clust_tbl) <-  NULL
x$optimalK <-  do.call("rbind",kprof); colnames(x$optimalK) <-  c("tags","k")
x$ClusteredProfilesTable <- do.call("rbind",clust_tbl)
structure(x,class = "ctsGEList")
}
ClustProfiles <- ClustProfiles(prts, scaling = TRUE)
ClustProfiles <- ClustProfiles(prts, scaling = TRUE)
for(idx in as.character(unique(tmp$profiles))){
tbl <-  tmp[tmp$profiles==idx,1:x$timePoints]
if(nrow(tbl) > 9){
ratio_ss <-  rep(0,9)
fit_km <-  list()
for (k in 1:9) {
# Apply k-means to school_result: school_km
fit_km[[k]] <- kmeans(tbl,k)
# Save the ratio between of WSS to TSS in kth element of ratio_ss
ratio_ss[k] <-  fit_km[[k]]$tot.withinss/fit_km[[k]]$totss
}
G <-  which(ratio_ss<0.2)[1]#when: WSS / TSS < 0.2 this is the optipal k
clust <-  fit_km[[G]]$cluster
}else{
G <- 1
clust <- rep(1,nrow(tbl))}
kprof[[idx]] <-  c(nrow(tbl),G)
clust_tbl[[idx]] <- data.frame(clusters=clust,profiles=idx)
rownames(clust_tbl[[idx]]) <- rownames(tbl)
}
idx
as.character(unique(tmp$profiles))
which(as.character(unique(tmp$profiles))==idx)
tbl <-  tmp[tmp$profiles==idx,1:x$timePoints]
nrow(tbl)
if(nrow(tbl) > 9){
ratio_ss <-  rep(0,9)
fit_km <-  list()
for (k in 1:9) {
# Apply k-means to school_result: school_km
fit_km[[k]] <- kmeans(tbl,k)
# Save the ratio between of WSS to TSS in kth element of ratio_ss
ratio_ss[k] <-  fit_km[[k]]$tot.withinss/fit_km[[k]]$totss
}
G <-  which(ratio_ss<0.2)[1]#when: WSS / TSS < 0.2 this is the optipal k
clust <-  fit_km[[G]]$cluster
}else{
G <- 1
clust <- rep(1,nrow(tbl))}
clust
ratio_ss
G
which(ratio_ss<0.2)
which(ratio_ss<0.2)[1]
is.na(G)
ClustProfiles = function(x,scaling=TRUE){
clust_tbl <-  list()
kprof <-  list()
if(scaling){ tmp <- cbind(as.data.frame(x$scaled),profiles=x$profiles[rownames(x$scaled),ncol(x$profiles)])
}
else { tmp <- cbind(as.data.frame(x$tsTable),profiles=x$profiles[rownames(x$scaled),ncol(x$profiles)])}
for(idx in as.character(unique(tmp$profiles))){
tbl <-  tmp[tmp$profiles==idx,1:x$timePoints]
if(nrow(tbl) > 9){
ratio_ss <-  rep(0,9)
fit_km <-  list()
for (k in 1:9) {
# Apply k-means to school_result: school_km
fit_km[[k]] <- kmeans(tbl,k)
# Save the ratio between of WSS to TSS in kth element of ratio_ss
ratio_ss[k] <-  fit_km[[k]]$tot.withinss/fit_km[[k]]$totss
}
G <-  which(ratio_ss<0.2)[1]#when: WSS / TSS < 0.2 this is the optipal k
if(is.na(G)){G <- 9}
clust <-  fit_km[[G]]$cluster
}else{
G <- 1
clust <- rep(1,nrow(tbl))}
kprof[[idx]] <-  c(nrow(tbl),G)
clust_tbl[[idx]] <- data.frame(clusters=clust,profiles=idx)
rownames(clust_tbl[[idx]]) <- rownames(tbl)
}
names(clust_tbl) <-  NULL
x$optimalK <-  do.call("rbind",kprof); colnames(x$optimalK) <-  c("tags","k")
x$ClusteredProfilesTable <- do.call("rbind",clust_tbl)
structure(x,class = "ctsGEList")
}
ClustProfiles <- ClustProfiles(prts, scaling = TRUE)
ClustProfiles$optimalK
library(ctsGE)
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
rm(ClustProfiles)
library(ctsGE)
c <- ClustProfilesstProfiles(prts, scaling = TRUE)
c <- ClustProfiles(prts, scaling = TRUE)
ClustProfiles
library(ctsGE)
c <- ClustProfiles(prts, scaling = TRUE)
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
library(ctsGE)
c <- ClustProfiles(prts, scaling = TRUE)
devtools::install_github("michmich76/ctsGE")
devtools::install_github("michmich76/ctsGE")
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
devtools::install_github("michmich76/ctsGE")
library("ctsGE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
c <- ClustProfiles(prts, scaling = TRUE)
data_dir <- system.file("extdata", package = "ctsGE")
files <- dir(path=data_dir,pattern = "\\.xls$")
rts <- readTSGE(files, path = data_dir, labels = c("0h","6h","12h","24h","48h","72h") )
prts <- PreparingTheProfiles(x = rts, cutoff = 0.8, mad.scale = TRUE)
c <- ClustProfiles(prts, scaling = TRUE)
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
c <- ClustProfiles(prts, scaling = TRUE)
library("ctsGE", lib.loc="/usr/local/lib/R/site-library")
c <- ClustProfiles(prts, scaling = TRUE)
scale()
scale
??scale
x=1:10
scale(x)
mean(x)
x-mean(x)
(x-mean(x))/sd(x)
scale(x,median(x),mad(x))
library("ctsGE", lib.loc="/usr/local/lib/R/site-library")
MadScale(x)
scale(x,median(x),mad(x))[1]
scale(x,median(x),mad(x))[[1]]
scale(x,median(x),mad(x))[1]
scale(x,median(x),mad(x))
scale(x,median(x),mad(x))[,1]
library(GEOquery)
gse2077 <- getGEO('GSE2077', GSElimits = c(1,6), GSEMatrix = FALSE)
gseList  <- lapply(GSMList(gse2077),function(x){Table(x)})
rts <- readTSGE(gseList,labels = c("0h","6h","12h","24h","48h","72h"))
prts <- PreparingTheProfiles(rts)
head(prts$tsTable)
head(prts$scaled)
PreparingTheProfiles1 = function(x,cutoff=1,mad.scale=TRUE){
if(class(x)!="ctsGEList") stop ( "data must be a ctsGEList object")
tp <- x$timePoints
x$scaled <- tmp <- scale(x$tsTable,median(x$tsTable),mad(x$tsTable))
if(!mad.scale) x$scaled <- tmp <- t(scale(t(x$tsTable)))
idx <- data.frame(t(apply(tmp,1,index,cutoff=cutoff))); colnames(idx) <- x$samples
x$profiles <- cbind(as.data.frame(idx),profiles=apply(idx,1,paste,collapse=""))
x$cutoff <- cutoff
structure(x,class = "ctsGEList")
}
prts1 <- PreparingTheProfiles1(rts)
x=head(prts$tsTable)
median(x)
median(t(x))
mad(t(x))
scale(x)
scale(x[1,])
scale(t(x))
scale(x[1,])
PreparingTheProfiles1 = function(x,cutoff=1,mad.scale=TRUE){
if(class(x)!="ctsGEList") stop ( "data must be a ctsGEList object")
tp <- x$timePoints
x$scaled <- tmp <- MadScale1(x$tsTable)
if(!mad.scale) x$scaled <- tmp <- MadScale1(x$tsTable,FALSE)#t(scale(t(x$tsTable)))
idx <- data.frame(t(apply(tmp,1,index,cutoff=cutoff))); colnames(idx) <- x$samples
x$profiles <- cbind(as.data.frame(idx),profiles=apply(idx,1,paste,collapse=""))
x$cutoff <- cutoff
structure(x,class = "ctsGEList")
}
MadScale1 = function(x, mad.scale=TRUE){
if(!mad.scale){ t(scale(t(x)))
} else{
if(is.matrix(x)){
tmp <- do.call("rbind",lapply(as.data.frame(t(x)),function(y){(y-median(y))/mad(y)}))
rownames(tmp) <- rownames(x)
colnames(tmp) <- colnames(x)
x <- tmp
} else (x-median(x))/mad(x)
}
}
prts1 <- PreparingTheProfiles1(rts)
head(prts$scaled)
head(prts1$scaled)
prts <- PreparingTheProfiles(rts,mad.scale = FALSE)
prts1 <- PreparingTheProfiles1(rts,mad.scale = FALSE)
head(prts1$scaled)
head(prts$scaled)
detach("package:ctsGE", unload=TRUE)
remove.packages("ctsGE", lib="/usr/local/lib/R/site-library")
remove.packages("ctsGE", lib="/usr/local/lib/R/site-library")
library(ctsGE)
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
library(ctsGE)
gse2077 <- getGEO('GSE2077', GSElimits = c(1,6), GSEMatrix = FALSE)
gseList  <- lapply(GSMList(gse2077),function(x){Table(x)})
rts <- readTSGE(gseList,labels = c("0h","6h","12h","24h","48h","72h"))
prts <- PreparingTheProfiles(rts)
head(prts$scaled)
prts <- PreparingTheProfiles(rts,mad.scale = FALSE)
head(prts$scaled)
nrow(prts$scaled)
gse2077
library(GEOquery)
gse2077 <- getGEO('GSE2077', GSEMatrix = FALSE)
gse2077
gse2077[[1]]
gse2077[1]
head(gse2077)
str(gse2077)
gseList  <- lapply(GSMList(gse2077),function(x){Table(x)})
gse2077$table_begin
table_begin(gse2077)
head(GEOquery::Table(gse2077))
GEOquery::GSMList(gse2077)
GEOquery::GSMList(gse2077)[[1]]
length(GEOquery::GSMList(gse2077))
GEOquery::getGSEDataTables(gse2077)
GEOquery::getGSEDataTables(GEOquery::GSMList(gse2077)[[1]])
GEOquery::GDS2eSet(gse2077)
GEOquery::GDS2eSet(GEOquery::GSMList(gse2077)[[1]])
GEOquery::GDS2MA(GEOquery::GSMList(gse2077)[[1]])
GEOquery::GDS2MA((gse2077))
GEOquery::Accession(GEOquery::GSMList(gse2077)[[1]])
GEOquery::Accession((gse2077))
GEOquery::Meta(GEOquery::GSMList(gse2077)[[1]])
gse=getGEO('GSE2077')[[1]]
library("BiocStyle", lib.loc="/usr/local/lib/R/site-library")
library("markdown", lib.loc="/usr/local/lib/R/site-library")
library(ctsGE)
library(ctsGE)
library(ctsGE)
library(ctsGE)
