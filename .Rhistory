tmp <- as.matrix(tbl[,c(1:rts$timePoints)])
fit <- kmeans(tmp, g,nstart = 25)
kmeans.groups <-
cbind(merge(data.frame(fit$cluster),tmp,by="row.names",all=TRUE),
index=tbl$index)
colnames(kmeans.groups)[1:2] <- c("genes","clusters")
return(kmeans.groups)
}
get_plot_output_list <- function(index,input_n,scaling=1) {
set.seed(100)
if(!scaling) {
gplot <- PlotIndexesClust(prts,index,input_n,TRUE)
}else{
gplot <- PlotIndexesClust(prts,index,input_n,FALSE)}
# Insert plot output objects the list
plot_output_list <- lapply(1:input_n, function(i) {
plotname <- paste("plot",index, i, sep="_")
plot_output_object <-
shiny::plotOutput(plotname, height = 280, width = 250)
plot_output_object <- shiny::renderPlot({
gg <- gplot[[2]][[i]]
print(gg)
})
})
return(do.call(shiny::tagList,plot_output_list))
}
shiny::shinyApp(
ui = shiny::pageWithSidebar(
shiny::headerPanel(title),
shiny::sidebarPanel(width = 2,
shiny::selectInput("index","Select an Index:",
choices = idx,
selected = idx[1]),
shinyapps::hr(),
shiny::sliderInput("n", "Number of clusters",
min = 1,max= 10,
value= 1,step= 1),
shiny::checkboxInput("scale",
"Raw values",value = FALSE)
),
shiny::mainPanel(width = 10,
shiny::tabsetPanel(
shiny::tabPanel("Time series",
icon =shiny::icon("line-chart"),
shiny::uiOutput("plots")),
shiny::tabPanel( "Genes Table",
icon = shiny::icon("table"),
shiny::uiOutput("table"))
)
)
),#pageWithSidebar
server = function(input, output,session) {
# filter input$index
filtered <- shiny::reactive({
if (is.null(input$index)) {
return(NULL)
}
if(!input$scale){
PlotIndexesClust(prts,input$index,k = input$n)
# tbl <- PlotIndexesClust(prts,input$index,k = input$n)[[1]]
# tbl <- cbind(genes=rownames(tbl)
#              ,clusters=as.factor(tbl$clusters),
#              data.frame(tbl[,prts$samples]),
#              index=input$index)
# rownames(tbl) <- NULL
# tbl
}else{
PlotIndexesClust(prts,input$index,k = input$n,scaling = F)
# tbl <-
#     PlotIndexesClust(prts,
#                      input$index,k = input$n,
#                      scaling = FALSE)[[1]]
# tbl <- cbind(genes=rownames(tbl),
#              clusters=as.factor(tbl$clusters),
#              data.frame(tbl[,prts$samples]),
#              index=input$index)
# rownames(tbl) <- NULL
# tbl
}
})
shiny::observe({
c <- filtered()[[2]]
output$plots <- shiny::renderUI({
do.call(shiny::tagList,c)
#get_plot_output_list(input$index,input$n, input$scale)
})
output$table <- shiny::renderUI({
if (is.null(filtered())) {return()}
t <- filtered()[[1]]
t <- cbind(genes=rownames(t)
,clusters=as.factor(t$clusters),
data.frame(t[,prts$samples]),
index=input$index)
rownames(t) <- NULL
output$tmp <-
DT::renderDataTable(t,
rownames = FALSE,
filter=list(
position = 'top',
clear = FALSE),
server = TRUE,
extensions =c('Buttons',
'Responsive',
'FixedHeader'),
options = list(
dom = 'TB<"clear">lfrtip',
lengthMenu =c(10,50,100,
nrow(filtered())),
fixedHeader = TRUE,
buttons = c('copy',
'csv',
'excel',
'print')
))
DT::dataTableOutput("tmp")
})#renderUI
})#end observe
}
)
}
ctsGEShinyApp1(rts,0.5)
ctsGEShinyApp1 <- function(rts, cutoff = 1, mad.scale = TRUE,title = NULL) {
prts <- PreparingTheIndexes(rts, cutoff, mad.scale)
idx <- as.character(unique(prts$index[,"index"]))
clusters <- function(tbl,g){
set.seed(100)
tmp <- as.matrix(tbl[,c(1:rts$timePoints)])
fit <- kmeans(tmp, g,nstart = 25)
kmeans.groups <-
cbind(merge(data.frame(fit$cluster),tmp,by="row.names",all=TRUE),
index=tbl$index)
colnames(kmeans.groups)[1:2] <- c("genes","clusters")
return(kmeans.groups)
}
get_plot_output_list <- function(index,input_n,scaling=1) {
set.seed(100)
if(!scaling) {
gplot <- PlotIndexesClust(prts,index,input_n,TRUE)
}else{
gplot <- PlotIndexesClust(prts,index,input_n,FALSE)}
# Insert plot output objects the list
plot_output_list <- lapply(1:input_n, function(i) {
plotname <- paste("plot",index, i, sep="_")
plot_output_object <-
shiny::plotOutput(plotname, height = 280, width = 250)
plot_output_object <- shiny::renderPlot({
gg <- gplot[[2]][[i]]
print(gg)
})
})
return(do.call(shiny::tagList,plot_output_list))
}
shiny::shinyApp(
ui = shiny::pageWithSidebar(
shiny::headerPanel(title),
shiny::sidebarPanel(width = 2,
shiny::selectInput("index","Select an Index:",
choices = idx,
selected = idx[1]),
shinyapps::hr(),
shiny::sliderInput("n", "Number of clusters",
min = 1,max= 10,
value= 1,step= 1),
shiny::checkboxInput("scale",
"Raw values",value = FALSE)
),
shiny::mainPanel(width = 10,
shiny::tabsetPanel(
shiny::tabPanel("Time series",
icon =shiny::icon("line-chart"),
shiny::uiOutput("plots")),
shiny::tabPanel( "Genes Table",
icon = shiny::icon("table"),
shiny::uiOutput("table"))
)
)
),#pageWithSidebar
server = function(input, output,session) {
# filter input$index
filtered <- shiny::reactive({
if (is.null(input$index)) {
return(NULL)
}
if(!input$scale){
PlotIndexesClust(prts,input$index,k = input$n)
# tbl <- PlotIndexesClust(prts,input$index,k = input$n)[[1]]
# tbl <- cbind(genes=rownames(tbl)
#              ,clusters=as.factor(tbl$clusters),
#              data.frame(tbl[,prts$samples]),
#              index=input$index)
# rownames(tbl) <- NULL
# tbl
}else{
PlotIndexesClust(prts,input$index,k = input$n,scaling = F)
# tbl <-
#     PlotIndexesClust(prts,
#                      input$index,k = input$n,
#                      scaling = FALSE)[[1]]
# tbl <- cbind(genes=rownames(tbl),
#              clusters=as.factor(tbl$clusters),
#              data.frame(tbl[,prts$samples]),
#              index=input$index)
# rownames(tbl) <- NULL
# tbl
}
})
shiny::observe({
c <- filtered()[[2]]
output$plots <- shiny::renderUI({
c
#get_plot_output_list(input$index,input$n, input$scale)
})
output$table <- shiny::renderUI({
if (is.null(filtered())) {return()}
t <- filtered()[[1]]
t <- cbind(genes=rownames(t)
,clusters=as.factor(t$clusters),
data.frame(t[,prts$samples]),
index=input$index)
rownames(t) <- NULL
output$tmp <-
DT::renderDataTable(t,
rownames = FALSE,
filter=list(
position = 'top',
clear = FALSE),
server = TRUE,
extensions =c('Buttons',
'Responsive',
'FixedHeader'),
options = list(
dom = 'TB<"clear">lfrtip',
lengthMenu =c(10,50,100,
nrow(filtered())),
fixedHeader = TRUE,
buttons = c('copy',
'csv',
'excel',
'print')
))
DT::dataTableOutput("tmp")
})#renderUI
})#end observe
}
)
}
ctsGEShinyApp1(rts,0.5)
prts <- PreparingTheIndexes(x = rts, cutoff = 0.55, mad.scale = TRUE)
indexPlot <- PlotIndexesClust(prts,idx = "1100-1-1",scaling = TRUE)
inexPlot
indexPlot[[2]]
names(indexPlot[[2]])
indexPlot[[2]][1]
indexPlot[[2]][[1]]
ctsGEShinyApp1 <- function(rts, cutoff = 1, mad.scale = TRUE,title = NULL) {
prts <- PreparingTheIndexes(rts, cutoff, mad.scale)
idx <- as.character(unique(prts$index[,"index"]))
clusters <- function(tbl,g){
set.seed(100)
tmp <- as.matrix(tbl[,c(1:rts$timePoints)])
fit <- kmeans(tmp, g,nstart = 25)
kmeans.groups <-
cbind(merge(data.frame(fit$cluster),tmp,by="row.names",all=TRUE),
index=tbl$index)
colnames(kmeans.groups)[1:2] <- c("genes","clusters")
return(kmeans.groups)
}
# get_plot_output_list <- function(index,input_n,scaling=1) {
#     set.seed(100)
#     if(!scaling) {
#         gplot <- PlotIndexesClust(prts,index,input_n,TRUE)
#     }else{
#         gplot <- PlotIndexesClust(prts,index,input_n,FALSE)}
#     # Insert plot output objects the list
#     plot_output_list <- lapply(1:input_n, function(i) {
#         plotname <- paste("plot",index, i, sep="_")
#         plot_output_object <-
#             shiny::plotOutput(plotname, height = 280, width = 250)
#         plot_output_object <- shiny::renderPlot({
#             gg <- gplot[[2]][[i]]
#             print(gg)
#         })
#     })
#     return(do.call(shiny::tagList,plot_output_list))
# }
get_plot_output_list <- function(plot_list) {
#set.seed(100)
# Insert plot output objects the list
plot_output_list <- lapply(1:length(plot_list), function(i) {
plotname <- names(plot_list)[i]
plot_output_object <-
shiny::plotOutput(plotname, height = 280, width = 250)
plot_output_object <- shiny::renderPlot({
gg <- plot_list[[i]]
print(gg)
})
})
return(do.call(shiny::tagList,plot_output_list))
}
shiny::shinyApp(
ui = shiny::pageWithSidebar(
shiny::headerPanel(title),
shiny::sidebarPanel(width = 2,
shiny::selectInput("index","Select an Index:",
choices = idx,
selected = idx[1]),
shinyapps::hr(),
shiny::sliderInput("n", "Number of clusters",
min = 1,max= 10,
value= 1,step= 1),
shiny::checkboxInput("scale",
"Raw values",value = FALSE)
),
shiny::mainPanel(width = 10,
shiny::tabsetPanel(
shiny::tabPanel("Time series",
icon =shiny::icon("line-chart"),
shiny::uiOutput("plots")),
shiny::tabPanel( "Genes Table",
icon = shiny::icon("table"),
shiny::uiOutput("table"))
)
)
),#pageWithSidebar
server = function(input, output,session) {
# filter input$index
filtered <- shiny::reactive({
if (is.null(input$index)) {
return(NULL)
}
if(!input$scale){
PlotIndexesClust(prts,input$index,k = input$n)
# tbl <- PlotIndexesClust(prts,input$index,k = input$n)[[1]]
# tbl <- cbind(genes=rownames(tbl)
#              ,clusters=as.factor(tbl$clusters),
#              data.frame(tbl[,prts$samples]),
#              index=input$index)
# rownames(tbl) <- NULL
# tbl
}else{
PlotIndexesClust(prts,input$index,k = input$n,scaling = F)
# tbl <-
#     PlotIndexesClust(prts,
#                      input$index,k = input$n,
#                      scaling = FALSE)[[1]]
# tbl <- cbind(genes=rownames(tbl),
#              clusters=as.factor(tbl$clusters),
#              data.frame(tbl[,prts$samples]),
#              index=input$index)
# rownames(tbl) <- NULL
# tbl
}
})
shiny::observe({
c <- filtered()[[2]]
output$plots <- shiny::renderUI({
get_plot_output_list(c)
})
output$table <- shiny::renderUI({
if (is.null(filtered())) {return()}
t <- filtered()[[1]]
t <- cbind(genes=rownames(t)
,clusters=as.factor(t$clusters),
data.frame(t[,prts$samples]),
index=input$index)
rownames(t) <- NULL
output$tmp <-
DT::renderDataTable(t,
rownames = FALSE,
filter=list(
position = 'top',
clear = FALSE),
server = TRUE,
extensions =c('Buttons',
'Responsive',
'FixedHeader'),
options = list(
dom = 'TB<"clear">lfrtip',
lengthMenu =c(10,50,100,
nrow(filtered())),
fixedHeader = TRUE,
buttons = c('copy',
'csv',
'excel',
'print')
))
DT::dataTableOutput("tmp")
})#renderUI
})#end observe
}
)
}
ctsGEShinyApp1(rts,0.55)
BiocCheck("/home/michal/MyPack/ctsGE")
library("BiocCheck", lib.loc="/usr/local/lib/R/site-library")
BiocCheck("/home/michal/MyPack/ctsGE")
BiocCheck("/home/michal/MyPack/ctsGE")
library("ctsGE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
detach("package:ctsGE", unload=TRUE)
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
devtools::install_github("michalsharabi/ctsGE")
rts$samples
ctsGE::ctsGEShinyApp(rts,0.55)
ctsGE::ctsGEShinyApp(rts,0.55)
library("ctsGE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
ctsGE::ctsGEShinyApp(rts,0.55)
detach("package:ctsGE", unload=TRUE)
library("ctsGE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
ctsGE::ctsGEShinyApp(rts,0.55)
detach("package:ctsGE", unload=TRUE)
library("ctsGE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
ctsGE::ctsGEShinyApp(rts,0.55)
detach("package:ctsGE", unload=TRUE)
library("ctsGE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
ctsGE::ctsGEShinyApp(rts,0.55)
detach("package:ctsGE", unload=TRUE)
remove.packages("ctsGE", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
devtools::install_github("michalsharabi/ctsGE")
library("ctsGE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
ctsGE::ctsGEShinyApp(rts,0.55)
data_dir <- system.file("extdata", package = "ctsGE")
files <- dir(path=data_dir,pattern = "\\.png$")
files
files[[1]]
print(files[[1]])
plot(files[[1]])
BiocCheck("/home/michal/MyPack/ctsGE")
BiocCheck("/home/michal/MyPack/ctsGE")
hr
hr()
BiocCheck("/home/michal/MyPack/ctsGE")
BiocCheck("/home/michal/MyPack/ctsGE")
library(ctsGE)
BiocCheck("/home/michal/MyPack/ctsGE")
library("BiocCheck", lib.loc="/usr/local/lib/R/site-library")
BiocCheck("/home/michal/MyPack/ctsGE")
library(ctsGE)
BiocCheck("/home/michal/MyPack/ctsGE")
ctsGEShinyApp(rts)
data_dir <- system.file("extdata", package = "ctsGE")
files <- dir(path=data_dir,pattern = "\\.xls$")
rts <- readTSGE(files, path = data_dir, labels = c("0h","6h","12h","24h","48h","72h") )
ctsGEShinyApp(rts,0.55)
library(ctsGE)
library(ctsGE)
ctsGEShinyApp(rts,0.55)
ctsGEShinyApp(rts,0.55)
ctsGEShinyApp(rts,0.55)
library(ctsGE)
ctsGEShinyApp(rts,0.55)
library(ctsGE)
ctsGEShinyApp(rts,0.55)
library(ctsGE)
ctsGEShinyApp(rts,0.55)
library(ctsGE)
ctsGEShinyApp(rts,0.55)
library(ctsGE)
ctsGEShinyApp(rts,0.55)
library(ctsGE)
library(ctsGE)
ctsGEShinyApp(rts,0.55)
library(ctsGE)
library(ctsGE)
ctsGEShinyApp(rts,0.55)
library(ctsGE)
ctsGEShinyApp(rts,0.55)
library(ctsGE)
library("BiocCheck", lib.loc="/usr/local/lib/R/site-library")
BiocCheck("/home/michal/MyPack/ctsGE")
library(ctsGE)
BiocCheck("/home/michal/MyPack/ctsGE")
BiocCheck("/home/michal/MyPack/ctsGE")
library(ctsGE)
ctsGEShinyApp(rts,0.55)
library(ctsGE)
detach("package:ctsGE", unload=TRUE)
library("ctsGE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library(ctsGE)
detach("package:ctsGE", unload=TRUE)
library("ctsGE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library(ctsGE)
detach("package:ctsGE", unload=TRUE)
library("ctsGE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library(ctsGE)
detach("package:ctsGE", unload=TRUE)
library("ctsGE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
ctsGEShinyApp(rts,0.55)
library("roxygen2", lib.loc="/usr/local/lib/R/site-library")
library(ctsGE)
library(ctsGE)
BiocCheck("/home/michal/MyPack/ctsGE")
ctsGEShinyApp(rts,0.55)
library(ctsGE)
library(ctsGE)
ctsGEShinyApp(rts,0.55)
library(ctsGE)
ctsGEShinyApp(rts,0.55)
BiocCheck("/home/michal/MyPack/ctsGE")
library(ctsGE)
ctsGEShinyApp(rts,0.55)
BiocCheck("/home/michal/MyPack/ctsGE")
library(ctsGE)
library(ctsGE)
library(ctsGE)
ctsGEShinyApp(rts,0.55)
rts$tsTable[1,]
median(rts$tsTable[1,])
mad(rts$tsTable[1,])
rts$tsTable[1,]-median(rts$tsTable[1,])
(rts$tsTable[1,]-median(rts$tsTable[1,]))/485.848
2932.1/485.848
ctsGEShinyApp(rts,0.55)
