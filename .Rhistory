showMethods(readDGE)
showMethods("readDGE")
install.packages("pryr")
is.object(rts)
is.object(files)
class(rts)
is.object(files)&!isS4(rts)
isS4(rts)
!isS4(rts)
!isS4(rts)&is.object(rts)
pryr::otype()
pryr::otype(rts)
pryr::otype(files)
dataDirectory <- system.file("extdata", package="Biobase"
)
exprsFile <- file.path(dataDirectory, "exprsData.txt")
exprs <- as.matrix(read.table(exprsFile, header=TRUE, sep="\t",
row.names=1,
as.is=TRUE))
head(exprs)
exprsFile
minimalSet <- ExpressionSet(assayData=exprs
)
minimalSet <- Biobase::ExpressionSet(assayData=exprs)
head(minimalSet)
minimalSet
data_dir <- system.file("extdata", package = "ctsGE")
files <- dir(path=data_dir,pattern = "\\.xls$")
exprsFile
minimalSet <- Biobase::ExpressionSet(assayData=exprs)
head(exprs)
head(minimalSet)
minimalSet
minimalSet@assayData
minimalSet@experimentData
minimalSet@assayData$exprs
minimalSet@experimentData@name
minimalSet@experimentData@lab
minimalSet@experimentData@samples
minimalSet@phenoData@data
minimalSet@phenoData@varMetadata
minimalSet@phenoData@varMetadata$labelDescription
head(minimalSet@assayData$exprs)
nrow(minimalSet@assayData$exprs)
exprsFile
data_dir <- system.file("extdata", package = "ctsGE")
files <- dir(path=data_dir,pattern = "\\.xls$")
files
gse2077 <- getGEO('GSE2077', GSElimits = c(1,6), GSEMatrix = FALSE)
# list of the time series tables
gseList <- lapply(GSMList(gse2077),function(x){Table(x)})
library(GEOquery)
gse2077 <- getGEO('GSE2077', GSElimits = c(1,6), GSEMatrix = FALSE)
gseList <- lapply(GSMList(gse2077),function(x){Table(x)})
names(gseList)
gseList[[1]]
head(gseList[[1]])
is.list(files)
!is.list(files)
d <- taglist <- list()
file.path
data_dir
files[1]
fn=files[1]
path=data_dir
file.path(path, fn)
d[[fn]] <- read.delim(fn, ..., stringsAsFactors = FALSE)
d[[fn]] <- read.delim(fn, stringsAsFactors = FALSE)
fn <- file.path(path, fn)
d[[fn]] <- read.delim(fn, stringsAsFactors = FALSE)
if(!is.list(files)){
d <- taglist <- list()
for (fn in files) {
if (!is.null(path))
fn <- file.path(path, fn)
d[[fn]] <- read.delim(fn, ..., stringsAsFactors = FALSE)
taglist[[fn]] <- as.character(d[[fn]][, columns[1]])
if (any(duplicated(taglist[[fn]]))) {
stop(paste("Repeated tag sequences in", fn))
}
}
}
if(!is.list(files)){
d <- taglist <- list()
for (fn in files) {
if (!is.null(path))
fn <- file.path(path, fn)
d[[fn]] <- read.delim(fn, stringsAsFactors = FALSE)
taglist[[fn]] <- as.character(d[[fn]][, columns[1]])
if (any(duplicated(taglist[[fn]]))) {
stop(paste("Repeated tag sequences in", fn))
}
}
}
columns=c(1,2)
if(!is.list(files)){
d <- taglist <- list()
for (fn in files) {
if (!is.null(path))
fn <- file.path(path, fn)
d[[fn]] <- read.delim(fn, stringsAsFactors = FALSE)
taglist[[fn]] <- as.character(d[[fn]][, columns[1]])
if (any(duplicated(taglist[[fn]]))) {
stop(paste("Repeated tag sequences in", fn))
}
}
}
head(d[[1]])
head(d[[2]])
files=exprsFile
path=dataDirectory
if(!is.list(files)){
d <- taglist <- list()
for (fn in files) {
if (!is.null(path))
fn <- file.path(path, fn)
d[[fn]] <- read.delim(fn, stringsAsFactors = FALSE)
taglist[[fn]] <- as.character(d[[fn]][, columns[1]])
if (any(duplicated(taglist[[fn]]))) {
stop(paste("Repeated tag sequences in", fn))
}
}
}
files
fn
dataDirectory
exprsFile
exprsFile <- "exprsData.txt"
files=exprsFile
if(!is.list(files)){
d <- taglist <- list()
for (fn in files) {
if (!is.null(path))
fn <- file.path(path, fn)
d[[fn]] <- read.delim(fn, stringsAsFactors = FALSE)
taglist[[fn]] <- as.character(d[[fn]][, columns[1]])
if (any(duplicated(taglist[[fn]]))) {
stop(paste("Repeated tag sequences in", fn))
}
}
}
head(d[[1]])
head(taglist[[1]])
head(exprsFile)
x <- list()
tags <- unique(unlist(taglist))
ntags <- length(tags)
nfiles <- length(files)
x$tsTable <- matrix(0, ntags, nfiles)
rownames(x$tsTable) <- tags
colnames(x$tsTable) <- labels
labels=NULL
colnames(x$tsTable) <- labels
if (is.null(colnames(x$tsTable))){
if(!is.list(files)){ colnames(x$tsTable) <-
x$samples <- limma::removeExt(files)
}else{colnames(x$tsTable) <- x$samples <- names(files)}
}else{x$samples <- colnames(x$tsTable)}
for (i in 1:nfiles) {
aa <- match(taglist[[i]], tags)
x$tsTable[aa, i] <- as.numeric(d[[i]][, columns[2]])
}
x$tags <- tags
x$timePoints <- nfiles
tmp <- apply(t(x$tsTable),2,mad)
if(sum(tmp==0)){
x$tsTable <- x$tsTable[names(which(tmp!=0)),]
x$tags <- names(which(tmp!=0))
print(paste0(sum(tmp==0)," Genes were remove"))
}
x$tsTable
tags <- unique(unlist(taglist))
ntags <- length(tags)
nfiles <- length(files)
x$tsTable <- matrix(0, ntags, nfiles)
rownames(x$tsTable) <- tags
colnames(x$tsTable) <- labels
if (is.null(colnames(x$tsTable))){
if(!is.list(files)){ colnames(x$tsTable) <-
x$samples <- limma::removeExt(files)
}else{colnames(x$tsTable) <- x$samples <- names(files)}
}else{x$samples <- colnames(x$tsTable)}
for (i in 1:nfiles) {
aa <- match(taglist[[i]], tags)
x$tsTable[aa, i] <- as.numeric(d[[i]][, columns[2]])
}
x$tags <- tags
x$timePoints <- nfiles
head(x$tsTable)
files
data_dir
data_dir <- system.file("extdata", package = "ctsGE")
data_dir
dataDirectory <- system.file("extdata", package="Biobase")
dataDirectory
data_dir
data_dir=dataDirectory
rts <- readTSGE(files, path = data_dir,columns = c(1,2:7), labels = c("0h","6h","12h","24h","48h","72h") )
rts <- ctsGE::readTSGE(files, path = data_dir,columns = c(1,2:7), labels = c("0h","6h","12h","24h","48h","72h") )
rts <- ctsGE::readTSGE(files, path = data_dir,columns = c(1,2:7), labels = c("0h","6h","12h","24h","48h","72h","ll") )
files
data_dir
columns = c(1,2:7)
if(!is.list(files)){
d <- taglist <- list()
for (fn in files) {
if (!is.null(path))
fn <- file.path(path, fn)
d[[fn]] <- read.delim(fn, stringsAsFactors = FALSE)
taglist[[fn]] <- as.character(d[[fn]][, columns[1]])
if (any(duplicated(taglist[[fn]]))) {
stop(paste("Repeated tag sequences in", fn))
}
}
}
x=list()
tags <- unique(unlist(taglist))
ntags <- length(tags)
nfiles <- length(files)
x$tsTable <- matrix(0, ntags, nfiles)
rownames(x$tsTable) <- tags
colnames(x$tsTable)
head(x$tsTable)
files
fn
d[[fn]]
head(d[[fn]])
ntags
nfiles
dataDirectory
read.delim("/usr/local/lib/R/site-library/Biobase/extdata/pData.txt")
exprsFile
exprs <- as.matrix(read.table(exprsFile, header=TRUE, sep="\t",
row.names=1,
as.is=TRUE))
read.table("/usr/local/lib/R/site-library/Biobase/extdata/pData.txt",header=TRUE, sep="\t",row.names=1,as.is=TRUE)
j=read.table("/usr/local/lib/R/site-library/Biobase/extdata/pData.txt",header=TRUE, sep="\t",row.names=1,as.is=TRUE)
head(j)
class(gseList[[1]])
head((gseList[[1]]))
class(gse2077)
class(gse2077[[1]])
gse2077@header
gse2077@header$summary
class(gse2077@header[[1]])
class(gse2077@gsms)
class(gse2077@header)
class(gse2077@gpls)
gse2077 <- getGEO('GSE2077')#, GSElimits = c(1,6), GSEMatrix = FALSE)
g=assayData(gse2077)
g$GSE2077_series_matrix.txt.gz
> assayDataElement(eset,'exprs')
oo=assayDataElement(gse2077[[1]],'exprs')
oo
head(oo)
nrow(oo)
ncol(oo)
oo=assayDataElement(gse2077[[2]],'exprs')
v=ExpressionSet(assayData(gse2077))
v=ExpressionSet(assayData(gse2077[[1]]))
head(v)
head(v@experimentData)
head(v@assayData$exprs)
v=assayData(ExpressionSet(assayData(gse2077[[1]])))
gse2077 <- getGEO('GSE2077')
exprs <- ExpressionSet(assayData(gse2077[[1]]))
head(exprs)
data <- ExpressionSet(assayData(gse2077[[1]]),'exprs')
data <- ExpressionSet(assayData(gse2077[[1]]),assayData = 'exprs')
data <- assayData(gse2077[[1]], 'exprs'
)
data <- assayData(gse2077[[1]])
head(data)
head(data$exprs)
head(data$exprs[,1])
head(data$exprs[,1:2])
Biobase::assayData(gse2077[[1]]
)
Biobase::assayData(gse2077)
GSMList(gse2077)
gse2077 <- getGEO('GSE2077', GSElimits = c(1,6), GSEMatrix = FALSE)
GSMList(gse2077)
Table(GSMList(gse2077))
Table(GSMList(gse2077)[[1]])
GSMList(gse2077)[[1]]
assayData(GSMList(gse2077)[[1]])
assayData(GSMList(gse2077))
b=assayData(GSMList(gse2077))
b$GSM37929
Table(b$GSM37929)
n=b$GSM37929
assayData(n)
ExpressionSet(n)
b[[1]]
class(b[[1]])
b[[1]]@dataTable
b[[1]]@header
assayData(b[[1]]@dataTable)
assayData(b[[1]])
ExpressionSet(b)
ExpressionSet(b$GSM37929)
ExpressionSet(Table(b))
ExpressionSet(Table(b[[1]]))
b
class(b)
b=Biobase::assayData(GSMList(gse2077))
class(b)
class(GSMList(gse2077))
g=GSMList(gse2077)
SummarizedExperiment::assays(gse2077)
SummarizedExperiment::assays(gse2077@gsms)
SummarizedExperiment::assays(GSMList(gse2077))
gse <- getGEO('GSE2077')
SummarizedExperiment::assays(gse)
assayData(gse)
s=assayData(gse)
s$GSE2077_series_matrix.txt.gz
experimentData(s)
experimentData(s$GSE2077_series_matrix.txt.gz)
assayData(s$GSE2077_series_matrix.txt.gz)
ExpressionSet(s)
ExpressionSet(s$GSE2077_series_matrix.txt.gz)
class(s[[1]])
ExpressionSet(s[[1]])
ExpressionSet(s[[1]]@experimentData)
s[[1]]@experimentData
assayDataElement(s[[1]],'exprs')
assayDataElement(s[[1]][,1:6],'exprs')
head(assayDataElement(s[[1]][,1:6],'exprs'))
head(assayDataElement(s[[1]][,1],'exprs'))
head(assayDataElement(s[[1]][,2],'exprs'))
gse2077 <- getGEO('GSE2077')#, GSElimits = c(1,6), GSEMatrix = FALSE)
gseExprs <- Biobase::assayData(gse2077)
# list of the time series tables
gseList <- lapply(gseExprs[[1]],function(x){Biobase::assayDataElement(x,'exprs')})
gseList <- lapply(1:6,function(x){Biobase::assayDataElement(gseExprs[[1]][,x],'exprs')})
names(gseList)
gseList[[1]]
head(gseList[[1]])
head(gseList[[2]])
gseExprs <- Biobase::assayData(gse2077)[[1]]
head(gseExprs)
gseExprs <- Biobase::assayData(gse2077)
head(gseExprs)
head(gseExprs[[1]])
gseExprs <- Biobase::assayDataElement(
Biobase::assayData(gse2077)[[1]],'exprs')
head(gseExprs[[1]])
head(gseExprs)
gseList <- lapply(gseExprs[,1:6],function(x){x})
gseList[[1]]
gseAssays <- Biobase::assayData(gse2077)
gseExprs <- Biobase::assayDataElement(gseAssays[[1]][,c(1:6)],'exprs')
# list of the time series tables
gseList <- lapply(1:6,function(x){gseExprs[,x]})
head(gseList[[1]])
gseList <- lapply(1:6,function(x){data.frame(Genes = rownames(gseExprs),gseExprs[,x]})
gseList <- lapply(1:6,function(x){data.frame(Genes = rownames(gseExprs),gseExprs[,x])})
head(gseList[[1]])
colnames(gseExprs)
library(GEOquery)
gse2077 <- getGEO('GSE2077')
gseAssays <- Biobase::assayData(gse2077)
gseExprs <- Biobase::assayDataElement(gseAssays[[1]][,c(1:6)],'exprs')
# list of the time series tables use only 6 samples
gseList <- lapply(1:6,function(x){data.frame(Genes = rownames(gseExprs),Value = gseExprs[,x])})
names(gseList) <- colnames(gseExprs)
rts <- readTSGE(gseList,labels = c("0h","6h","12h","24h","48h","72h"))
rts <- ctsGE::readTSGE(gseList,labels = c("0h","6h","12h","24h","48h","72h"))
head(rts$tsTable)
names(rts)
names(rts)==c("l")
names(rts)==c("samples")
names(rts)%in%c("samples")
c("samples")%in%names(rts)
is.list(b)
!is.list(b)
library(ctsGE)
library(ctsGE)
library("ctsGE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
data_dir <- system.file("extdata", package = "ctsGE")
files <- dir(path=data_dir,pattern = "\\.xls$")
rts <- readTSGE(files, path = data_dir, labels = c("0h","6h","12h","24h","48h","72h") )
library(ctsGE)
rts <- readTSGE(files, path = data_dir, labels = c("0h","6h","12h","24h","48h","72h") )
class(rts)
prts <- PreparingTheIndexes(x = rts, cutoff = 0.55, mad.scale = TRUE)
prts
PreparingTheIndexes(x = rts, cutoff = 0.55, mad.scale = TRUE)
library(ctsGE)
prts <- PreparingTheIndexes(x = rts, cutoff = 0.55, mad.scale = TRUE)
prts$cutoff
prts$index
class(prts)
ClustIndexes <- ClustIndexes(prts, scaling = TRUE)
ClustIndexes$optimalK
library(ctsGE)
library(ctsGE)
library(ctsGE)
tb_product = cbind(product_id=1:100,price=rnorm(100))
tb_product
randu
head(randu)
rnorm(100:1000)
sample(100:1000, 100, replace=T)
tb_product = cbind(product_id=1:100,price=sample(100:1000, 100, replace=T))
tb_product
tb_product = as.data.frame(cbind(product_id=1:100,price=sample(100:1000, 100, replace=T)))
tb_product
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
z
dates <- c("02/27/92", "02/27/92", "01/14/92", "02/28/92", "02/01/92")
as.Date(dates, "%m/%d/%y")
z=as.Date(dates, "%m/%d/%y")
rep(z,20)
dates <- c("02/27/92", "03/27/92", "01/14/92", "02/28/92", "02/01/92")
as.Date(dates, "%m/%d/%y")
z=as.Date(dates, "%m/%d/%y")
rep(z,20)
z=rep(z,20)
tb_trans = as.data.frame(cbind(trans_id=sample(10:100, 100,replace = F),transaction_timestamp=z,product_id=1:100))
tb_trans = as.data.frame(cbind(trans_id=sample(10:100, 100),transaction_timestamp=z,product_id=1:100))
sample(10:100, 100)
tb_trans = as.data.frame(cbind(trans_id=sample(10:100, 100,replace = T),transaction_timestamp=z,product_id=1:100))
tb_product
tb_trans
tb_trans$trans_id
table(tb_trans$trans_id)
table(tb_trans$product_id)
library("dplyr", lib.loc="/usr/local/lib/R/site-library")
tb_product %>% group_by(transaction_timestamp)
tb_trans %>% group_by(transaction_timestamp)
tb_trans = as.data.frame(cbind(trans_id=sample(10:100, 100,replace = T),transaction_timestamp=as.Date(z),product_id=1:100))
tb_trans
z
as.character(z)
tb_trans = as.data.frame(cbind(trans_id=sample(10:100, 100,replace = T),transaction_timestamp=as.character(z),product_id=1:100))
tb_trans %>% group_by(transaction_timestamp)
tb_trans
tb_trans %>% group_by(transaction_timestamp) %>% summarise(product_id)
tb_trans %>% group_by(transaction_timestamp) %>% summarize(product_id)
tb_trans %>% group_by(transaction_timestamp) %>% summarise(product_id,n())
tb_trans %>% group_by(transaction_timestamp) %>% summarise(n())
tb_trans %>% group_by(transaction_timestamp) %>% filter(product_id)
tb_trans %>% group_by(transaction_timestamp) %>% select(product_id)
tb_trans %>% group_by(transaction_timestamp) %>% select(product_id) %>% order_by(transaction_timestamp)
tb_trans %>% group_by(transaction_timestamp) %>% order_by(transaction_timestamp)
tb_trans %>% arrange(transaction_timestamp)
tb_trans %>% arrange(transaction_timestamp) %>% group_by(product_id)
tb_trans %>% arrange(transaction_timestamp) %>% group_by(product_id) %>% select(product_id)
tb_trans %>% arrange(transaction_timestamp) %>% group_by(product_id) %>% select(transaction_timestamp,product_id)
tb_trans %>% arrange(transaction_timestamp) %>% group_by(product_id) %>% select(transaction_timestamp,product_id) %>%
z=as.Date(dates, "%m/%d/%y")
z=rep(z,8)
z
z=as.Date(dates, "%m/%d/%y")
z=rep(z,16)
z
tb_product = as.data.frame(cbind(product_id=1:100,price=sample(100:1000, 100, replace=T)))
tb_trans = as.data.frame(cbind(trans_id=sample(10:100, 80,replace = T),
transaction_timestamp=as.character(z),product_id=sample(1:100, 80,replace = T)))
tb_trans
tb_trans$product_id
tb_product %>% filter(product_id %in% levels(tb_trans$product_id))
tmp = tb_product %>% filter(product_id %in% levels(tb_trans$product_id))
tb_trans %>% mutate(price=tmp)
tb_trans
merge(tb_trans,tb_product,by="product_id")
table(tb_trans$product_id)
new_tb <- merge(tb_trans,tb_product,by="product_id")
new_tb %>% arrange(transaction_timestamp) %>%
group_by(transaction_timestamp) %>%
select(transaction_timestamp,price) %>%
summarise(sum(price))
translate_sql(new_tb)
translate_sql(new_tb %>% arrange(transaction_timestamp))
translate_sql(new_tb %>% arrange(transaction_timestamp) %>%
group_by(transaction_timestamp) %>%
select(transaction_timestamp,price) %>%
summarise(sum(price)))
translate_sql(merge(tb_trans,tb_product,by="product_id"))
translate_sql(new_tb <- merge(tb_trans,tb_product,by="product_id"))
translate_sql(merge(tb_trans,tb_product))
merge(tb_trans,tb_product)
translate_sql(merge(tb_trans,tb_product) %>% arrange(transaction_timestamp) %>%
group_by(transaction_timestamp) %>%
select(transaction_timestamp,price) %>%
summarise(sum(price)))
translate_sql_q(merge(tb_trans,tb_product) %>% arrange(transaction_timestamp) %>%
group_by(transaction_timestamp) %>%
select(transaction_timestamp,price) %>%
summarise(sum(price)))
sql()
sql(merge(tb_trans,tb_product))
sql_join(tb_trans,tb_product)
sql_join(merge(tb_trans,tb_product))
sql_variant(merge(tb_trans,tb_product) %>% arrange(transaction_timestamp) %>%
group_by(transaction_timestamp) %>%
select(transaction_timestamp,price) %>%
summarise(sum(price)))
translate_sql(SELECT  product_id, price, transaction_timestamp
translate_sql_q(SELECT  product_id, price, transaction_timestamp
sql_variant(SELECT  product_id, price, transaction_timestamp
translate_sql(merge(tb_trans,tb_product) %>% arrange(transaction_timestamp) %>%
group_by(transaction_timestamp) %>%
select(transaction_timestamp,price) %>%
summarise(sum(price)))
tb_product
biocLite("ctsGE")
source("https://bioconductor.org/biocLite.R")
biocLite("ctsGE")
